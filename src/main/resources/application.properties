#---------- Spring Configuration ----------
spring.application.name=sitfis-seguridad
spring.config.import=optional:file:.env[.properties]
spring.threads.virtual.enabled=true
spring.jackson.deserialization.fail-on-unknown-properties=true
server.port=8081

#----------Reintentos del usuario---------
reintentosLoguin=3

#---------- Redis configuration ----------
spring.data.redis.host=localhost
spring.data.redis.port=6379
spring.data.redis.timeout=6000
spring.data.redis.database=0

#---------- Oracle configuration ----------
spring.datasource.url=${ORACLE_URL:jdbc:oracle:thin:@localhost:1521:sitfis}
spring.datasource.username=${ORACLE_USERNAME:SITFISSEGURIDAD}
spring.datasource.password=${ORACLE_PASSWORD:oracle}
spring.datasource.driver-class-name=oracle.jdbc.OracleDriver

spring.jpa.hibernate.ddl-auto=none
# EN FALSE MEJORA EL RENDIMIENTO EN TRANSACCIONES
#spring.jpa.open-in-view=false

#---------- Keycloack configuration ----------
# 1. Configuración del Servidor de Recursos (para validar tokens entrantes)
spring.security.oauth2.resourceserver.jwt.issuer-uri=${OAUTH_SERVER}

# 2. Configuración de Clientes OAuth2 (para que esta app actúe como cliente)

# 2.1. Cliente para autenticar usuarios (ej. frontend-client)
spring.security.oauth2.client.registration.keycloak-user.provider=keycloak
spring.security.oauth2.client.registration.keycloak-user.client-id=${OAUTH_CLIENT_ID}
spring.security.oauth2.client.registration.keycloak-user.client-secret=${OAUTH_CLIENT_SECRET}
spring.security.oauth2.client.registration.keycloak-user.authorization-grant-type=password
spring.security.oauth2.client.registration.keycloak-user.scope=openid,profile,email

# 2.2. Cliente para la Service Account de Administración (backend-admin-service)
spring.security.oauth2.client.registration.keycloak-admin.provider=keycloak
spring.security.oauth2.client.registration.keycloak-admin.client-id=${KEYCLOAK_ADMIN_CLIENT_ID}
spring.security.oauth2.client.registration.keycloak-admin.client-secret=${KEYCLOAK_ADMIN_CLIENT_SECRET}
spring.security.oauth2.client.registration.keycloak-admin.authorization-grant-type=client_credentials

# 2.3. Proveedor común para ambos clientes
spring.security.oauth2.client.provider.keycloak.issuer-uri=${OAUTH_SERVER}

# Endpoints específicos
keycloak.logout-uri=${OAUTH_SERVER}/protocol/openid-connect/logout
keycloak.token-revocation-uri=${OAUTH_SERVER}/protocol/openid-connect/revoke
keycloak.token-uri=${OAUTH_SERVER}/protocol/openid-connect/token
keycloak.users-endpoint=${OAUTH_SERVER_ADMIN}/users


# Gateway URLs
app.gateway.url=${GATEWAY_URL:http://localhost:8080}


#---------- Actuator configuration ----------
management.endpoints.web.exposure.include=health, info, metrics, prometheus
management.endpoint.health.show-details=always

management.metrics.distribution.percentiles-histogram.http.server.requests=true
management.observations.key-values.application=${spring.application.name}
management.tracing.sampling.probability=1.0
# o localhost:4317 si inicia localmente con docker-compose
#management.otlp.tracing.endpoint=http://tempo:4317
#management.otlp.tracing.endpoint=http://localhost:4317

#---------- OpenApi configuration ----------
#springdoc.api-docs.enabled=false
#springdoc.swagger-ui.enabled=false
springdoc.version=2.8.9
springdoc.swagger-ui.path=/swagger-ui
springdoc.swagger-ui.operationsSorter=alpha
springdoc.api-docs.path=/api-docs
springdoc.override-with-generic-response=false
#springdoc.show-actuator=true

# Apis de otros servicios
api.services.mesapartes.url=http://localhost:9010/api/mp
api.services.loki.url=http://localhost:3100/loki/api/v1/push

#api.mesapartes.base-url=http://localhost:9010/api/mp
#api.loki.base-url=http://localhost:3100/loki/api/v1/push

#---------- Flyway configuration ----------
spring.flyway.enabled=false
spring.flyway.user=${spring.datasource.username}
spring.flyway.password=${spring.datasource.password}
spring.flyway.url=${spring.datasource.url}
spring.flyway.locations=classpath:db/migration
spring.flyway.baseline-on-migrate=true
spring.flyway.validate-on-migrate=true

#logging.level.org.springframework.web=debug
logging.level.org.springframework.core.env=debug
logging.pattern.console= %d{yyyy-MMM-dd HH:mm:ss.SSS} [%thread] %highlight(%-5level) %cyan(%logger{15}) - %msg %n
logging.level.org.hibernate.SQL=DEBUG
logging.level.net.ttddyy.observation.datasource=DEBUG


# Logs OAuth2 JWT más detallados
logging.level.org.springframework.security.oauth2.server.resource.web=TRACE
logging.level.org.springframework.security.oauth2.server.resource.authentication=TRACE
logging.level.org.springframework.security.oauth2.jwt=TRACE

# Ver conversión de Authentication
logging.level.org.springframework.security.oauth2.server.resource.web.server=TRACE
logging.level.org.springframework.security.web.server.authentication=TRACE

# Ver el contexto de seguridad
logging.level.org.springframework.security.web.server.context=TRACE
logging.level.org.springframework.security.core.context=TRACE


logging.level.org.springframework.security.oauth2.server.resource=DEBUG